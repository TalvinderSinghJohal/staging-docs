{
  "openapi": "3.1.0",
  "info": {
    "title": "AltrumAI API",
    "description": "\n# Introduction\n\nWelcome to the ***AltrumAI API*** – an enterprise-grade unified proxy designed to provide secure, policy-based access to leading\nLarge Language Model (LLM) APIs and AI platforms.\n\nThe AltrumAI API acts as a centralised gateway to services including ***OpenAI, Anthropic, Azure AI Studio, Amazon Bedrock,***\nand ***Google Gemini***. By leveraging advanced guardrails and enforcement mechanisms, it ensures that your organisation can safely\nand responsibly integrate AI capabilities while adhering to internal policies, data privacy regulations, and ethical standards.\n\nBuilt for scale and flexibility, AltrumAI empowers enterprises to:\n\n• ***Control access*** to AI services through dynamic, project-level policies in your organisation.\n\n• ***Enforce compliance*** with data handling, audit, and usage guidelines.\n\n• ***Abstract complexity*** by managing multiple AI providers through a single API interface.\n\nTo begin using the AltrumAI API, you'll need a Project API Key, which must be included in the request headers. \nYou can obtain this key by registering your AI project on the <a href=\"https://platform.altrum.ai/login\">AltrumAI Platform</a>.\n\nThis documentation will guide you through setup, usage, and advanced features of AltrumAI API, ensuring you can use AI responsibly across your organisation at scale.\n",
    "contact": {
      "name": "Contact Support",
      "email": "support@altrum.ai"
    },
    "version": "aurora.1.1.4",
    "x-logo": {
      "url": "/static/logo.svg"
    }
  },
  "servers": [
    {
      "url": "https://api.altrum.ai/",
      "description": "Production"
    }
  ],
  "paths": {
    "/v1/openai/chat/completions": {
      "post": {
        "tags": ["OpenAI Proxy"],
        "summary": "OpenAI Chat Completions",
        "description": "Proxy endpoint for OpenAI Chat Completions API",
        "operationId": "chat_completions_v1_openai_chat_completions_post",
        "security": [{"APIKeyHeader": []}],
        "parameters": [
          {
            "name": "router_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Router Name"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "OpenAI API key in format 'Bearer sk-...'",
              "title": "Authorization"
            },
            "description": "OpenAI API key in format 'Bearer sk-...'"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenAIRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIModelResponse-Input"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse401"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse422"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse500"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --location 'https://api.altrum.ai/v1/openai/chat/completions' --header 'Authorization: Bearer OPENAI_API_KEY' --header 'Project-Api-Key: ALTRUMAI_PROJECT_API_KEY' --header 'Content-Type: application/json' --data '{\n    \"model\":\"gpt-4o\",\n    \"messages\": [\n        {\"role\":\"assistant\", \"content\":\"You are a helpful assistant\"},\n        {\"role\":\"user\", \"content\":\"Hello!\"}\n    ],\n    \"stream\":false\n}'\n",
            "label": "Shell"
          },
          {
            "lang": "Python",
            "source": "import openai\nopenai.api_key = 'OPENAI_API_KEY'\nopenai.base_url = 'https://api.altrum.ai/v1/openai/'\nresponse = openai.chat.completions.create(\n        model='gpt-4o-mini',\n        messages=[\n            {'role': 'assistant', 'content': 'You are a helpful assistant.'},\n            {'role': 'user', 'content': 'Hello!'}\n        ],\n        stream=False,\n        extra_headers={'Project-Api-Key': 'ALTRUMAI_PROJECT_API_KEY'},\n    )\nprint(response.choices[0].message.content)\n",
            "label": "Python"
          },
          {
            "lang": "Javascript",
            "source": "const { OpenAI } = require(\"openai\");\n\nconst openai = new OpenAI({\n    baseURL: \"https://api.altrum.ai/v1/openai/\",\n    apiKey: \"OPENAI_API_KEY\",\n    defaultHeaders: {\"Project-Api-Key\": \"ALTRUMAI_PROJECT_API_KEY\"}\n    });\n\n(async () => {\nconst completion = await openai.chat.completions.create({\n    model: \"gpt-4o-mini\",\n    messages: [\n    { role: \"assistant\", content: \"You are a helpful assistant\" },\n    { role: \"user\", content: \"Hello!\" }\n    ],\n    stream: false\n});\nconsole.log(completion.choices[0].message.content);\n})();\n",
            "label": "Javascript"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "OpenAIRequest": {
        "properties": {
          "model": {
            "type": "string",
            "enum": ["gpt-4o", "gpt-4o-mini", "gpt-4-turbo", "gpt-4", "gpt-4-32k", "gpt-3.5-turbo", "gpt-3.5-turbo-16k"],
            "minLength": 1,
            "title": "Model",
            "description": "The model used for the chat completion"
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "type": "array",
            "title": "Messages",
            "description": "A list of messages comprising the conversation"
          },
          "stream": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stream",
            "description": "If set, partial message deltas will be sent",
            "default": false
          },
          "stream_options": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/StreamOptions"
              },
              {
                "type": "null"
              }
            ]
          },
          "timeout": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timeout",
            "description": "Timeout in seconds for completion requests",
            "default": 600
          },
          "frequency_penalty": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 2.0,
                "minimum": -2.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Frequency Penalty",
            "description": "Frequency penalty",
            "default": 0
          },
          "logit_bias": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "number"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logit Bias"
          },
          "logprobs": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logprobs",
            "description": "Whether to return log probabilities",
            "default": false
          },
          "top_logprobs": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 20.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Top Logprobs",
            "description": "Number of most likely tokens to return"
          },
          "max_tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Tokens",
            "description": "Maximum number of tokens to generate"
          },
          "n": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "N",
            "description": "Number of completions to generate",
            "default": 1
          },
          "presence_penalty": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 2.0,
                "minimum": -2.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Presence Penalty",
            "description": "Presence penalty",
            "default": 0
          },
          "response_format": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Response Format"
          },
          "seed": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Seed"
          },
          "stop": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stop"
          },
          "temperature": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 2.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Temperature",
            "description": "Sampling temperature",
            "default": 1.0
          },
          "top_p": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Top P",
            "description": "Nucleus sampling parameter",
            "default": 1.0
          },
          "tools": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tools"
          },
          "tool_choice": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Choice"
          },
          "parallel_tool_calls": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parallel Tool Calls",
            "default": true
          },
          "user": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User",
            "default": ""
          }
        },
        "type": "object",
        "required": ["model", "messages"],
        "title": "OpenAIRequest",
        "description": "Schema for OpenAI API requests.",
        "example": {
          "messages": [
            {
              "content": "You are a helpful assistant.",
              "role": "system"
            },
            {
              "content": "Hello!",
              "role": "user"
            }
          ],
          "model": "gpt-3.5-turbo"
        }
      }
    },
    "securitySchemes": {
      "APIKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "Project-Api-Key"
      }
    }
  }
}