{
  "openapi": "3.1.0",
  "info": {
    "title": "AltrumAI API",
    "description": "\n# Introduction\n\nWelcome to the ***AltrumAI API*** – an enterprise-grade unified proxy designed to provide secure, policy-based access to leading\nLarge Language Model (LLM) APIs and AI platforms.\n\nThe AltrumAI API acts as a centralised gateway to services including ***OpenAI, Anthropic, Azure AI Studio, Amazon Bedrock,***\nand ***Google Gemini***. By leveraging advanced guardrails and enforcement mechanisms, it ensures that your organisation can safely\nand responsibly integrate AI capabilities while adhering to internal policies, data privacy regulations, and ethical standards.\n\nBuilt for scale and flexibility, AltrumAI empowers enterprises to:\n\n• ***Control access*** to AI services through dynamic, project-level policies in your organisation.\n\n• ***Enforce compliance*** with data handling, audit, and usage guidelines.\n\n• ***Abstract complexity*** by managing multiple AI providers through a single API interface.\n\nTo begin using the AltrumAI API, you'll need a Project API Key, which must be included in the request headers. \nYou can obtain this key by registering your AI project on the <a href=\"https://platform.altrum.ai/login\">AltrumAI Platform</a>.\n\nThis documentation will guide you through setup, usage, and advanced features of AltrumAI API, ensuring you can use AI responsibly across your organisation at scale.\n",
    "contact": {
      "name": "Contact Support",
      "email": "support@altrum.ai"
    },
    "version": "aurora.1.1.4",
    "x-logo": {
      "url": "/static/logo.svg"
    }
  },
  "servers": [
    {
      "url": "https://api.altrum.ai/",
      "description": "Production"
    }
  ],
  "paths": {
    "/v1/openai/chat/completions": {
      "post": {
        "tags": ["OpenAI Proxy"],
        "summary": "OpenAI Chat Completions",
        "description": "Proxy endpoint for OpenAI Chat Completions API",
        "operationId": "chat_completions_v1_openai_chat_completions_post",
        "security": [{"APIKeyHeader": []}],
        "parameters": [
          {
            "name": "router_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Router Name"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "OpenAI API key in format 'Bearer sk-...'",
              "title": "Authorization"
            },
            "description": "OpenAI API key in format 'Bearer sk-...'"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenAIRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIModelResponse-Input"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse401"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse422"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse500"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --location 'https://api.altrum.ai/v1/openai/chat/completions' --header 'Authorization: Bearer OPENAI_API_KEY' --header 'Project-Api-Key: ALTRUMAI_PROJECT_API_KEY' --header 'Content-Type: application/json' --data '{\n    \"model\":\"gpt-4o\",\n    \"messages\": [\n        {\"role\":\"assistant\", \"content\":\"You are a helpful assistant\"},\n        {\"role\":\"user\", \"content\":\"Hello!\"}\n    ],\n    \"stream\":false\n}'\n",
            "label": "Shell"
          },
          {
            "lang": "Python",
            "source": "import openai\nopenai.api_key = 'OPENAI_API_KEY'\nopenai.base_url = 'https://api.altrum.ai/v1/openai/'\nresponse = openai.chat.completions.create(\n        model='gpt-4o-mini',\n        messages=[\n            {'role': 'assistant', 'content': 'You are a helpful assistant.'},\n            {'role': 'user', 'content': 'Hello!'}\n        ],\n        stream=False,\n        extra_headers={'Project-Api-Key': 'ALTRUMAI_PROJECT_API_KEY'},\n    )\nprint(response.choices[0].message.content)\n",
            "label": "Python"
          },
          {
            "lang": "Javascript",
            "source": "const { OpenAI } = require(\"openai\");\n\nconst openai = new OpenAI({\n    baseURL: \"https://api.altrum.ai/v1/openai/\",\n    apiKey: \"OPENAI_API_KEY\",\n    defaultHeaders: {\"Project-Api-Key\": \"ALTRUMAI_PROJECT_API_KEY\"}\n    });\n\n(async () => {\nconst completion = await openai.chat.completions.create({\n    model: \"gpt-4o-mini\",\n    messages: [\n    { role: \"assistant\", content: \"You are a helpful assistant\" },\n    { role: \"user\", content: \"Hello!\" }\n    ],\n    stream: false\n});\nconsole.log(completion.choices[0].message.content);\n})();\n",
            "label": "Javascript"
          }
        ]
      }
    },
    "/v1/anthropic/chat/completions": {
      "post": {
        "tags": ["Anthropic Proxy"],
        "summary": "Anthropic Chat Completions",
        "description": "Proxy endpoint for Anthropic Claude Chat Completions API",
        "operationId": "chat_completions_v1_anthropic_chat_completions_post",
        "security": [{"APIKeyHeader": []}],
        "parameters": [
          {
            "name": "router_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Router Name"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Anthropic API key",
              "title": "Authorization"
            },
            "description": "Anthropic API key"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnthropicRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnthropicModelResponse-Input"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse401"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse422"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse500"
                },
                "example": {
                  "detail": "An unexpected error occurred"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --location 'https://api.altrum.ai/v1/anthropic/chat/completions' --header 'Authorization: ANTHROPIC_API_KEY' --header 'Project-Api-Key: ALTRUMAI_PROJECT_API_KEY' --header 'Content-Type: application/json' --data '{\n    \"model\":\"claude-3-opus-20240229\",\n    \"messages\": [\n        {\"role\":\"user\", \"content\":\"Hello\"},\n        {\"role\":\"system\", \"content\":\"You are a helpful assistant\"}\n    ],\n    \"stream\":false\n}'\n",
            "label": "Shell"
          },
          {
            "lang": "Python",
            "source": "from openai import OpenAI\nclient = OpenAI(\n    api_key=\"anything\",\n    base_url=\"https://api.altrum.ai/v1/anthropic/\")\n\nresponse = client.chat.completions.create(\n    model=\"claude-3-opus-20240229\", \n    messages=[\n                {\"role\":\"system\", \"content\": \"You are a helpful assistant\"},\n                {\"role\": \"user\", \"content\": \"Hello\"},\n            ],\n    stream=False,\n    extra_headers={\"Project-Api-Key\":\"ALTRUMAI_PROJECT_API_KEY\",\n                    \"Authorization\":\"ANTHROPIC_API_KEY\"})\nprint(response.choices[0].message.content)\n",
            "label": "Python"
          },
          {
            "lang": "Javascript",
            "source": "const { OpenAI } = require(\"openai\");\n\nconst openai = new OpenAI({\n    baseURL: \"https://api.altrum.ai/v1/anthropic/\",\n    defaultHeaders: {\n        \"Project-Api-Key\": \"ALTRUMAI_PROJECT_API_KEY\",\n        \"Authorization\":\"ANTHROPIC_API_KEY\"},\n    apiKey: \"anything\"\n});\n\n(async () => {\n        const response = await openai.chat.completions.create({\n            model: \"claude-3-opus-20240229\",\n            messages: [\n                { role: \"system\", content: \"You are a helpful assistant\" },\n                { role: \"user\", content: \"Hello\" }\n            ],\n            stream: false\n        });\n        console.log(response.choices[0].message.content);\n}\n)();\n\n",
            "label": "Javascript"
          }
        ]
      }
    },
    "/v1/azure/{endpoint}/openai/deployments/{deployment_id}/chat/completions": {
      "post": {
        "tags": ["Azure OpenAI Proxy"],
        "summary": "Azure OpenAI Chat Completions",
        "description": "Proxy endpoint for Azure OpenAI Chat Completions API",
        "operationId": "chat_completions_v1_azure__endpoint__openai_deployments__deployment_id__chat_completions_post",
        "security": [{"APIKeyHeader": []}],
        "parameters": [
          {
            "name": "endpoint",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The Azure OpenAI endpoint name",
              "title": "Endpoint"
            },
            "description": "The Azure OpenAI endpoint name"
          },
          {
            "name": "deployment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The deployment ID of the model",
              "title": "Deployment Id"
            },
            "description": "The deployment ID of the model"
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Azure OpenAI API version",
              "title": "Api-Version"
            },
            "description": "Azure OpenAI API version"
          },
          {
            "name": "router_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Router Name"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Azure OpenAI API key in format 'Bearer {key}'",
              "title": "Authorization"
            },
            "description": "Azure OpenAI API key in format 'Bearer {key}'"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AzureOpenAIRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AzureOpenAIModelResponse-Input"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse401"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse422"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse500"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --location 'https://api.altrum.ai/v1/azure/{ENDPOINT}/openai/deployments/{DEPLOYMENT_ID}/chat/completions?api-version=2024-10-21' --header 'Authorization: Bearer AZURE_OPENAI_API_KEY' --header 'Project-Api-Key: ALTRUMAI_PROJECT_API_KEY' --header 'Content-Type: application/json' --data '{\n    \"model\":\"gpt-4o-mini\",\n    \"messages\": [\n        {\"role\":\"assistant\", \"content\":\"You are a helpful assistant\"},\n        {\"role\":\"user\", \"content\":\"Hello!\"}\n    ],\n    \"stream\":false\n}'\n",
            "label": "Shell"
          },
          {
            "lang": "Python",
            "source": "from openai import AzureOpenAI\n\nclient = AzureOpenAI(\n    azure_endpoint=\"https://api.altrum.ai/v1/azure/{ENDPOINT}\",\n    azure_deployment=DEPLOYMENT_ID,\n    api_key=AZURE_OPENAI_API_KEY,\n    api_version=\"2024-10-21\",\n    default_headers={\"Project-Api-Key\": \"ALTRUMAI_PROJECT_API_KEY\"}\n)\nresponse = client.chat.completions.create(\n    model=DEPLOYMENT_ID,\n    messages= [ \n        {\"role\": \"assistant\", \"content\": \"You are a helpful assistant.\"},\n        {\"role\": \"user\", \"content\": \"Hello\"},\n    ],\n    stream=False,\n)\nprint(response.choices[0].message.content)\n",
            "label": "Python"
          },
          {
            "lang": "Javascript",
            "source": "const {AzureOpenAI} = require(\"openai\")\n\nconst client = new AzureOpenAI({ \n    endpoint:\"https://api.altrum.ai/v1/azure/{ENDPOINT}\",\n    deployment:DEPLOYMENT_ID, \n    apiVersion:\"2024-10-21\", \n    defaultHeaders:{\"Project-Api-Key\": \"ALTRUMAI_PROJECT_API_KEY\",\n                    \"Authorization\": \"Bearer AZURE_OPENAI_API_KEY\"\n    },\n    apiKey:\"ANYTHING\"},\n);\n\n(async () => {\n    const completion = await client.chat.completions.create({\n        model:DEPLOYMENT_ID,\n        messages: [\n            {role:\"assistant\", content:\"You are a helpful assistant\"},\n            {role:\"user\", content:\"Hello\"}\n        ],\n        stream:false\n    });\n    console.log(completion.choices[0].message.content);\n})();\n",
            "label": "Javascript"
          }
        ]
      }
    },
    "/v1/bedrock/chat/completions": {
      "post": {
        "tags": ["Amazon Bedrock Proxy"],
        "summary": "Amazon Bedrock Chat Completions",
        "description": "Proxy endpoint for Amazon Bedrock Chat Completions API",
        "operationId": "chat_completions_v1_bedrock_chat_completions_post",
        "security": [{"APIKeyHeader": []}],
        "parameters": [
          {
            "name": "router_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Router Name"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "AWS credentials in format 'AWS4-HMAC-SHA256 Credential=...'",
              "title": "Authorization"
            },
            "description": "AWS credentials in format 'AWS4-HMAC-SHA256 Credential=...'"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BedrockRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BedrockModelResponse-Input"
                },
                "example": {
                  "id": "msg_123",
                  "type": "message",
                  "role": "assistant",
                  "content": [
                    {
                      "type": "text",
                      "text": "Hello! How can I help you today?"
                    }
                  ],
                  "model": "anthropic.claude-3-sonnet-20240229-v1:0",
                  "usage": {
                    "input_tokens": 9,
                    "output_tokens": 12
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse401"
                },
                "example": {
                  "detail": "Invalid AWS credentials"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse422"
                },
                "example": {
                  "detail": [
                    {
                      "loc": ["body", "messages"],
                      "msg": "field required",
                      "type": "value_error.missing"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse500"
                },
                "example": {
                  "detail": "An unexpected error occurred"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --location 'https://api.altrum.ai/v1/bedrock/chat/completions' --header 'Authorization: AWS4-HMAC-SHA256 Credential=...' --header 'Project-Api-Key: ALTRUMAI_PROJECT_API_KEY' --header 'Content-Type: application/json' --data '{\n    \"model\":\"anthropic.claude-3-sonnet-20240229-v1:0\",\n    \"messages\": [\n        {\"role\":\"user\", \"content\":\"Hello\"},\n        {\"role\":\"system\", \"content\":\"You are a helpful assistant\"}\n    ],\n    \"stream\":false\n}'\n",
            "label": "Shell"
          },
          {
            "lang": "Python",
            "source": "import boto3\nfrom openai import OpenAI\n\nclient = OpenAI(\n    api_key=\"anything\",\n    base_url=\"https://api.altrum.ai/v1/bedrock/\")\n\nresponse = client.chat.completions.create(\n    model=\"anthropic.claude-3-sonnet-20240229-v1:0\", \n    messages=[\n        {\"role\":\"system\", \"content\": \"You are a helpful assistant\"},\n        {\"role\": \"user\", \"content\": \"Hello\"},\n    ],\n    stream=False,\n    extra_headers={\"Project-Api-Key\":\"ALTRUMAI_PROJECT_API_KEY\",\n                  \"Authorization\":\"AWS4-HMAC-SHA256 Credential=...\"})\nprint(response.choices[0].message.content)\n",
            "label": "Python"
          },
          {
            "lang": "Javascript",
            "source": "const { OpenAI } = require(\"openai\");\n\nconst openai = new OpenAI({\n    baseURL: \"https://api.altrum.ai/v1/bedrock/\",\n    defaultHeaders: {\n        \"Project-Api-Key\": \"ALTRUMAI_PROJECT_API_KEY\",\n        \"Authorization\":\"AWS4-HMAC-SHA256 Credential=...\"},\n    apiKey: \"anything\"\n});\n\n(async () => {\n    const response = await openai.chat.completions.create({\n        model: \"anthropic.claude-3-sonnet-20240229-v1:0\",\n        messages: [\n            { role: \"system\", content: \"You are a helpful assistant\" },\n            { role: \"user\", content: \"Hello\" }\n        ],\n        stream: false\n    });\n    console.log(response.choices[0].message.content);\n})();\n",
            "label": "Javascript"
          }
        ]
      }
    },
    "/v1/gemini/chat/completions": {
      "post": {
        "tags": ["Google Gemini Proxy"],
        "summary": "Google Gemini Chat Completions",
        "description": "Proxy endpoint for Google Gemini Chat Completions API",
        "operationId": "chat_completions_v1_gemini_chat_completions_post",
        "security": [{"APIKeyHeader": []}],
        "parameters": [
          {
            "name": "router_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Router Name"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Google API key",
              "title": "Authorization"
            },
            "description": "Google API key"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeminiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeminiModelResponse-Input"
                },
                "example": {
                  "id": "msg_123",
                  "type": "message",
                  "role": "assistant",
                  "content": [
                    {
                      "type": "text",
                      "text": "Hello! How can I help you today?"
                    }
                  ],
                  "model": "gemini-pro",
                  "usage": {
                    "input_tokens": 9,
                    "output_tokens": 12
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse401"
                },
                "example": {
                  "detail": "Invalid API key"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse422"
                },
                "example": {
                  "detail": [
                    {
                      "loc": ["body", "messages"],
                      "msg": "field required",
                      "type": "value_error.missing"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse500"
                },
                "example": {
                  "detail": "An unexpected error occurred"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --location 'https://api.altrum.ai/v1/gemini/chat/completions' --header 'Authorization: GOOGLE_API_KEY' --header 'Project-Api-Key: ALTRUMAI_PROJECT_API_KEY' --header 'Content-Type: application/json' --data '{\n    \"model\":\"gemini-pro\",\n    \"messages\": [\n        {\"role\":\"user\", \"content\":\"Hello\"},\n        {\"role\":\"system\", \"content\":\"You are a helpful assistant\"}\n    ],\n    \"stream\":false\n}'\n",
            "label": "Shell"
          },
          {
            "lang": "Python",
            "source": "from openai import OpenAI\n\nclient = OpenAI(\n    api_key=\"anything\",\n    base_url=\"https://api.altrum.ai/v1/gemini/\")\n\nresponse = client.chat.completions.create(\n    model=\"gemini-pro\", \n    messages=[\n        {\"role\":\"system\", \"content\": \"You are a helpful assistant\"},\n        {\"role\": \"user\", \"content\": \"Hello\"},\n    ],\n    stream=False,\n    extra_headers={\"Project-Api-Key\":\"ALTRUMAI_PROJECT_API_KEY\",\n                  \"Authorization\":\"GOOGLE_API_KEY\"})\nprint(response.choices[0].message.content)\n",
            "label": "Python"
          },
          {
            "lang": "Javascript",
            "source": "const { OpenAI } = require(\"openai\");\n\nconst openai = new OpenAI({\n    baseURL: \"https://api.altrum.ai/v1/gemini/\",\n    defaultHeaders: {\n        \"Project-Api-Key\": \"ALTRUMAI_PROJECT_API_KEY\",\n        \"Authorization\":\"GOOGLE_API_KEY\"},\n    apiKey: \"anything\"\n});\n\n(async () => {\n    const response = await openai.chat.completions.create({\n        model: \"gemini-pro\",\n        messages: [\n            { role: \"system\", content: \"You are a helpful assistant\" },\n            { role: \"user\", content: \"Hello\" }\n        ],\n        stream: false\n    });\n    console.log(response.choices[0].message.content);\n})();\n",
            "label": "Javascript"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "OpenAIRequest": {
        "properties": {
          "model": {
            "type": "string",
            "enum": ["gpt-4o", "gpt-4o-mini", "gpt-4-turbo", "gpt-4", "gpt-4-32k", "gpt-3.5-turbo", "gpt-3.5-turbo-16k"],
            "minLength": 1,
            "title": "Model",
            "description": "The model used for the chat completion"
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "type": "array",
            "title": "Messages",
            "description": "A list of messages comprising the conversation"
          },
          "stream": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stream",
            "description": "If set, partial message deltas will be sent",
            "default": false
          },
          "stream_options": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/StreamOptions"
              },
              {
                "type": "null"
              }
            ]
          },
          "timeout": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timeout",
            "description": "Timeout in seconds for completion requests",
            "default": 600
          },
          "frequency_penalty": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 2.0,
                "minimum": -2.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Frequency Penalty",
            "description": "Frequency penalty",
            "default": 0
          },
          "logit_bias": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "number"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logit Bias"
          },
          "logprobs": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logprobs",
            "description": "Whether to return log probabilities",
            "default": false
          },
          "top_logprobs": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 20.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Top Logprobs",
            "description": "Number of most likely tokens to return"
          },
          "max_tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Tokens",
            "description": "Maximum number of tokens to generate"
          },
          "n": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "N",
            "description": "Number of completions to generate",
            "default": 1
          },
          "presence_penalty": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 2.0,
                "minimum": -2.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Presence Penalty",
            "description": "Presence penalty",
            "default": 0
          },
          "response_format": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Response Format"
          },
          "seed": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Seed"
          },
          "stop": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stop"
          },
          "temperature": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 2.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Temperature",
            "description": "Sampling temperature",
            "default": 1.0
          },
          "top_p": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Top P",
            "description": "Nucleus sampling parameter",
            "default": 1.0
          },
          "tools": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tools"
          },
          "tool_choice": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Choice"
          },
          "parallel_tool_calls": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parallel Tool Calls",
            "default": true
          },
          "user": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User",
            "default": ""
          }
        },
        "type": "object",
        "required": ["model", "messages"],
        "title": "OpenAIRequest",
        "description": "Schema for OpenAI API requests.",
        "example": {
          "messages": [
            {
              "content": "You are a helpful assistant.",
              "role": "system"
            },
            {
              "content": "Hello!",
              "role": "user"
            }
          ],
          "model": "gpt-3.5-turbo"
        }
      },
      "Message": {
        "properties": {
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content"
          },
          "role": {
            "type": "string",
            "enum": ["system", "user", "assistant", "tool"],
            "title": "Role"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "tool_calls": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Calls"
          },
          "tool_call_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Call Id"
          }
        },
        "type": "object",
        "required": ["role"],
        "title": "Message"
      },
      "StreamOptions": {
        "properties": {
          "include_usage": {
            "type": "boolean",
            "title": "Include Usage",
            "default": false
          }
        },
        "type": "object",
        "title": "StreamOptions"
      },
      "OpenAIModelResponse-Input": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "choices": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Choices"
          },
          "created": {
            "type": "integer",
            "title": "Created"
          },
          "model": {
            "type": "string",
            "title": "Model"
          },
          "object": {
            "type": "string",
            "title": "Object"
          },
          "system_fingerprint": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "System Fingerprint"
          },
          "usage": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Usage"
          }
        },
        "type": "object",
        "required": ["id", "choices", "created", "model", "object"],
        "title": "OpenAIModelResponse-Input"
      },
      "AnthropicRequest": {
        "properties": {
          "model": {
            "type": "string",
            "enum": ["claude-3-opus-20240229", "claude-3-sonnet-20240229", "claude-3-haiku-20240307"],
            "minLength": 1,
            "title": "Model",
            "description": "The model used for the chat completion"
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "type": "array",
            "title": "Messages",
            "description": "A list of messages comprising the conversation"
          },
          "max_tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Tokens",
            "description": "Maximum number of tokens to generate"
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          },
          "stop_sequences": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stop Sequences"
          },
          "stream": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stream",
            "description": "If set, partial message deltas will be sent",
            "default": false
          },
          "system": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "System"
          },
          "temperature": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Temperature",
            "description": "Sampling temperature",
            "default": 1.0
          },
          "top_k": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Top K"
          },
          "top_p": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Top P",
            "description": "Nucleus sampling parameter",
            "default": 1.0
          }
        },
        "type": "object",
        "required": ["model", "messages"],
        "title": "AnthropicRequest",
        "description": "Schema for Anthropic API requests.",
        "example": {
          "messages": [
            {
              "content": "You are a helpful assistant.",
              "role": "system"
            },
            {
              "content": "Hello!",
              "role": "user"
            }
          ],
          "model": "claude-3-sonnet-20240229"
        }
      },
      "AnthropicModelResponse-Input": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "role": {
            "type": "string",
            "title": "Role"
          },
          "content": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Content"
          },
          "model": {
            "type": "string",
            "title": "Model"
          },
          "stop_reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stop Reason"
          },
          "stop_sequence": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stop Sequence"
          },
          "usage": {
            "type": "object",
            "title": "Usage"
          }
        },
        "type": "object",
        "required": ["id", "type", "role", "content", "model", "usage"],
        "title": "AnthropicModelResponse-Input"
      },
      "AzureOpenAIRequest": {
        "properties": {
          "messages": {
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "type": "array",
            "title": "Messages",
            "description": "A list of messages comprising the conversation"
          },
          "stream": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stream",
            "description": "If set, partial message deltas will be sent",
            "default": false
          },
          "stream_options": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/StreamOptions"
              },
              {
                "type": "null"
              }
            ]
          },
          "timeout": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timeout",
            "description": "Timeout in seconds for completion requests",
            "default": 600
          },
          "frequency_penalty": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 2.0,
                "minimum": -2.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Frequency Penalty",
            "description": "Frequency penalty",
            "default": 0
          },
          "logit_bias": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "number"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logit Bias"
          },
          "logprobs": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logprobs",
            "description": "Whether to return log probabilities",
            "default": false
          },
          "top_logprobs": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 20.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Top Logprobs",
            "description": "Number of most likely tokens to return"
          },
          "max_tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Tokens",
            "description": "Maximum number of tokens to generate"
          },
          "n": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "N",
            "description": "Number of completions to generate",
            "default": 1
          },
          "presence_penalty": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 2.0,
                "minimum": -2.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Presence Penalty",
            "description": "Presence penalty",
            "default": 0
          },
          "response_format": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Response Format"
          },
          "seed": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Seed"
          },
          "stop": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stop"
          },
          "temperature": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 2.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Temperature",
            "description": "Sampling temperature",
            "default": 1.0
          },
          "top_p": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Top P",
            "description": "Nucleus sampling parameter",
            "default": 1.0
          },
          "tools": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tools"
          },
          "tool_choice": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Choice"
          },
          "parallel_tool_calls": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parallel Tool Calls",
            "default": true
          },
          "user": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User",
            "default": ""
          }
        },
        "type": "object",
        "required": ["messages"],
        "title": "AzureOpenAIRequest",
        "description": "Schema for Azure OpenAI API requests.",
        "example": {
          "messages": [
            {
              "content": "You are a helpful assistant.",
              "role": "system"
            },
            {
              "content": "Hello!",
              "role": "user"
            }
          ]
        }
      },
      "AzureOpenAIModelResponse-Input": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "choices": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Choices"
          },
          "created": {
            "type": "integer",
            "title": "Created"
          },
          "model": {
            "type": "string",
            "title": "Model"
          },
          "object": {
            "type": "string",
            "title": "Object"
          },
          "system_fingerprint": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "System Fingerprint"
          },
          "usage": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Usage"
          }
        },
        "type": "object",
        "required": ["id", "choices", "created", "model", "object"],
        "title": "AzureOpenAIModelResponse-Input"
      },
      "ApiResponse401": {
        "properties": {
          "detail": {
            "type": "string",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": ["detail"],
        "title": "ApiResponse401"
      },
      "ApiResponse422": {
        "properties": {
          "detail": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": ["detail"],
        "title": "ApiResponse422"
      },
      "ApiResponse500": {
        "properties": {
          "detail": {
            "type": "string",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": ["detail"],
        "title": "ApiResponse500"
      },
      "BedrockRequest": {
        "properties": {
          "model": {
            "type": "string",
            "enum": ["anthropic.claude-3-sonnet-20240229-v1:0", "anthropic.claude-3-haiku-20240307-v1:0", "anthropic.claude-3-opus-20240229-v1:0"],
            "minLength": 1,
            "title": "Model",
            "description": "The model used for the chat completion"
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "type": "array",
            "title": "Messages",
            "description": "A list of messages comprising the conversation"
          },
          "stream": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stream",
            "description": "If set, partial message deltas will be sent",
            "default": false
          },
          "temperature": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Temperature",
            "description": "Sampling temperature",
            "default": 1.0
          },
          "max_tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Tokens",
            "description": "Maximum number of tokens to generate"
          }
        },
        "type": "object",
        "required": ["model", "messages"],
        "title": "BedrockRequest",
        "description": "Schema for Amazon Bedrock API requests."
      },
      "BedrockModelResponse-Input": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "role": {
            "type": "string",
            "title": "Role"
          },
          "content": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Content"
          },
          "model": {
            "type": "string",
            "title": "Model"
          },
          "usage": {
            "type": "object",
            "title": "Usage"
          }
        },
        "type": "object",
        "required": ["id", "type", "role", "content", "model", "usage"],
        "title": "BedrockModelResponse-Input"
      },
      "GeminiRequest": {
        "properties": {
          "model": {
            "type": "string",
            "enum": ["gemini-pro", "gemini-pro-vision"],
            "minLength": 1,
            "title": "Model",
            "description": "The model used for the chat completion"
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "type": "array",
            "title": "Messages",
            "description": "A list of messages comprising the conversation"
          },
          "stream": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stream",
            "description": "If set, partial message deltas will be sent",
            "default": false
          },
          "temperature": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Temperature",
            "description": "Sampling temperature",
            "default": 1.0
          },
          "max_tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Tokens",
            "description": "Maximum number of tokens to generate"
          }
        },
        "type": "object",
        "required": ["model", "messages"],
        "title": "GeminiRequest",
        "description": "Schema for Google Gemini API requests."
      },
      "GeminiModelResponse-Input": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "role": {
            "type": "string",
            "title": "Role"
          },
          "content": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Content"
          },
          "model": {
            "type": "string",
            "title": "Model"
          },
          "usage": {
            "type": "object",
            "title": "Usage"
          }
        },
        "type": "object",
        "required": ["id", "type", "role", "content", "model", "usage"],
        "title": "GeminiModelResponse-Input"
      }
    },
    "securitySchemes": {
      "APIKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "Project-Api-Key"
      }
    }
  }
}